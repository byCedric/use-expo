import { useEffect, useState, useCallback } from 'react';
import { Pedometer } from 'expo-sensors';
import { PedometerMeasurement, PedometerOptions } from './use-pedometer';

export function usePedometerHistory(
	start: Date,
	end: Date,
	options: PedometerHistoryOptions = {},
): UsePedometerHistorySignature {
	const [data, setData] = useState(options.initial);
	const [available, setAvailable] = useState<boolean>();
	const {
		get = true,
		availability = true,
	} = options;

	const getHistory = useCallback(
		() => Pedometer.getStepCountAsync(start, end).then(setData),
		[start, end]
	);

	useEffect(() => {
		if (availability) {
			Pedometer.isAvailableAsync().then(setAvailable);
		}

		if (get) {
			getHistory();
		}
	}, [availability, get, getHistory]);

	return [data, available, getHistory];
}

type UsePedometerHistorySignature = [
	PedometerMeasurement | undefined,
	boolean | undefined,
	() => Promise<void>,
];

export interface PedometerHistoryOptions extends PedometerOptions {
	/** If it should fetch the pedometer step count when mounted, defaults to `true`. */
	get?: boolean;
}
